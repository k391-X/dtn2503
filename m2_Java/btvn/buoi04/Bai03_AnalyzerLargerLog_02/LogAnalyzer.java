package LogServer;

import java.io.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.TimeUnit;

public class LogAnalyzer {
    public static void main(String[] args) {
        String inputFile = "server.log";  // File log ƒë·∫ßu v√†o
        String outputFile = "log_report.txt";  // File b√°o c√°o ƒë·∫ßu ra

        // L∆∞u tr·ªØ s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa c√°c s·ª± ki·ªán
        Map<String, Integer> eventCounts = new HashMap<>();
        List<Long> infoTimestamps = new ArrayList<>();
        List<Long> errorTimestamps = new ArrayList<>();

        // ƒê·ªçc file log v√† ph√¢n t√≠ch
        try (BufferedReader br = new BufferedReader(new FileReader(inputFile))) {
            String line;
            while ((line = br.readLine()) != null) {
                // Ph√¢n t√≠ch d√≤ng log theo ƒë·ªãnh d·∫°ng
                String[] parts = line.split(" ", 3);  // Chia th√†nh timestamp, log level v√† message

                if (parts.length < 3) continue;  // N·∫øu d√≤ng kh√¥ng h·ª£p l·ªá, b·ªè qua

                String timestamp = parts[0] + " " + parts[1];  // timestamp format: yyyy-MM-dd HH:mm:ss
                String logLevel = parts[2].split(" ")[0];  // INFO, ERROR, WARN
                String message = parts[2].substring(logLevel.length()).trim();  // Message sau log level

                // Chuy·ªÉn timestamp th√†nh th·ªùi gian t√≠nh b·∫±ng miliseconds
                long timestampMillis = convertToTimestampMillis(timestamp);

                // ƒê·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa m·ªói s·ª± ki·ªán
                eventCounts.put(logLevel, eventCounts.getOrDefault(logLevel, 0) + 1);

                // T√≠nh th·ªùi gian gi·ªØa c√°c s·ª± ki·ªán INFO v√† ERROR
                if (logLevel.equals("INFO")) {
                    infoTimestamps.add(timestampMillis);
                } else if (logLevel.equals("ERROR")) {
                    errorTimestamps.add(timestampMillis);
                }
            }

            // T√≠nh th·ªùi gian trung b√¨nh gi·ªØa c√°c s·ª± ki·ªán INFO v√† ERROR
            long totalDuration = 0;
            int count = 0;
            for (int i = 0; i < Math.min(infoTimestamps.size(), errorTimestamps.size()); i++) {
                totalDuration += Math.abs(infoTimestamps.get(i) - errorTimestamps.get(i));
                count++;
            }

            long averageDuration = (count > 0) ? totalDuration / count : 0;

            // Ghi k·∫øt qu·∫£ v√†o file b√°o c√°o
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile))) {
                writer.write("B√°o c√°o th·ªëng k√™ log:\n");
                writer.write("S·ª± ki·ªán INFO: " + eventCounts.getOrDefault("INFO", 0) + " l·∫ßn\n");
                writer.write("S·ª± ki·ªán ERROR: " + eventCounts.getOrDefault("ERROR", 0) + " l·∫ßn\n");
                writer.write("S·ª± ki·ªán WARN: " + eventCounts.getOrDefault("WARN", 0) + " l·∫ßn\n");
                writer.write("Th·ªùi gian trung b√¨nh gi·ªØa INFO v√† ERROR: " + formatDuration(averageDuration) + "\n");
                writer.write("üìÅ K·∫øt qu·∫£ l∆∞u t·∫°i: " + outputFile);
                System.out.println("‚úÖ B√°o c√°o ƒë√£ ƒë∆∞·ª£c ghi v√†o " + outputFile);
            }

        } catch (IOException e) {
            System.out.println("‚ùå C√≥ l·ªói x·∫£y ra khi ƒë·ªçc ho·∫∑c ghi file:");
            e.printStackTrace();
        }
    }

    // H√†m chuy·ªÉn ƒë·ªïi timestamp sang millis
    private static long convertToTimestampMillis(String timestamp) {
        try {
            DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            Date date = format.parse(timestamp);
            return date.getTime();
        } catch (ParseException e) {
            e.printStackTrace();
            return 0;
        }
    }

    // H√†m ƒë·ªãnh d·∫°ng th·ªùi gian t·ª´ millis sang "HH:mm:ss"
    private static String formatDuration(long durationMillis) {
        long hours = TimeUnit.MILLISECONDS.toHours(durationMillis);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(durationMillis) - TimeUnit.HOURS.toMinutes(hours);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(durationMillis) - TimeUnit.MINUTES.toSeconds(minutes) - TimeUnit.HOURS.toSeconds(hours);
        return String.format("%02d:%02d:%02d", hours, minutes, seconds);
    }
}
